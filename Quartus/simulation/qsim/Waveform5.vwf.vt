// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "12/11/2024 19:36:34"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          charactor_test
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module charactor_test_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg gameover;
reg rst;
reg score;
// wires                                               
wire [7:0] com;
wire e;
wire [7:0] lcd_data;
wire [6:0] num_data;
wire piezo;
wire rs;
wire rw;

// assign statements (if any)                          
charactor_test i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.com(com),
	.e(e),
	.gameover(gameover),
	.lcd_data(lcd_data),
	.num_data(num_data),
	.piezo(piezo),
	.rs(rs),
	.rst(rst),
	.rw(rw),
	.score(score)
);
initial 
begin 
#1000000 $finish;
end 

// clk
always
begin
	clk = 1'b0;
	clk = #250 1'b1;
	#250;
end 

// gameover
initial
begin
	gameover = 1'b1;
end 

// rst
initial
begin
	rst = 1'b0;
end 

// score
initial
begin
	score = 1'b1;
	score = #10000 1'b0;
end 
endmodule

